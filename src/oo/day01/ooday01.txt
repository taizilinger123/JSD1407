回顾:
1.方法
    修饰词 返回值类型 方法名(参数列表){
       方法体
    }

    //方法都是用于操作数据的
    //如果所操作的数据比较固定---不需要参数
    //若所操作的数据不固定-------需要参数
    public static char[] generate(){
       char[] chs = new char[5];
       给chs赋值
       return chs;
    }
    public static int[] check(char[] chs,char[] input){
       for(int i=0;i<chs.length;i++){
          for(int j=0;j<input.length;j++){
	     if(chs[i]==input[j]){
	     }
	  }
       }
    }
    给你一个需求，void()，写方法体
    猜字母游戏-----下周一之前，熟练写下来

    public static int[] generateArray(int len,int range){
       int[] arr = new int[len];
       for(int i=0;i<arr.length;i++){
          arr[i] = Math.random()*range;

       }
       return arr;
    }

正课:
1.什么是类？什么是对象？
   1)现实世界是由很多对象组成的 
     基于对象抽出了类
   2)对象：真实存在的单个的个体
     类：类型/类别，一类个体  
   3)类中可以包含：
      3.1)所有对象所共有的特征/属性(静)---变量 
	  3.2)所有对象所共有的行为(动)--------方法    
   4)一个类可以创建多个对象
     同一个类的多个对象，结构相同，数据不同
   5)类是对象的模板，对象是类的具体的实例
   
2.如何创建类？如何创建对象？
3.引用类型之间画等号:指向了同一个对象
  1)对其中一个引用的修改会影响另一个引用
  2)eg:房门钥匙
          基本类型之间画等号：赋值
  1)对其中一个值的修改不会影响另一个值
  2)eg:身份证复印件


4.null:空，没有指向任何对象
                     不能对null做任何操作，若操作则会报
       NullPointerException空指针异常


  main(){
    ...
    ...
    generate(?);
    ...
    ...
    check(?);
  }
  generate(?){
  }
  check(?){
  } 
面向过程编程:一堆方法,调来调去
面向对象编程:以对象为核心，围绕着对象做操作
面向接口编程:面向对象的基础之上，抽接口
    复用性好、可维护性好、可扩展性好、
    移植性好......

面向过程:实在
面向对象:抽象
  A,B,C
  只放在一个地方更合适---抽象所在

晕是正常的------多练、多想

不晕两种情况:
1.什么都不懂
2.以为自己不晕---语法掌握

6天:掌握语法，知道何时用

讲完打飞机小游戏
------面向对象6天内容实际的应用


缺陷一:缺乏对数据的封装
缺陷二:数据和方法分离状态
int a;
int[]  b;
Emp  e;

class  Emp{  //Emp就是自己造的一个数据类型--雇员
    String name;
	int age;
	double salary;
	void  print(){
	   System.out.println("姓名:"+name);
	   System.out.println("年龄:"+age);
	   System.out.println("工资:"+salary);	 
	}
}

class  Test{ //测试类
   public  static  void  main(String[] args){
       Emp  e = new Emp();//创建了一个Emp的对象   
       e.name = "zhangsan";
	   e.age = 25;
	   e.salary = 5000;
	   e.print();
   }
}



class Emp{
   String name;
   int age;
   char gender;
   double salary;
}

将name,age,gender,salary----包到一种类型(Emp)中

public static void print(Emp emp){
  输出emp.name,emp.age,emp.salary,emp.gender
}
public static void print(String a,int b
                         char c,double d){
}

public static void print(String name,int age,
                         char gender,double salary){
  输出4个变量的值
}
main(){
  String name = "zhangsan";
  int age = 25;
  char gender='男';
  double salary = 5000;
  print(name,age,gender,salary);

  String a = "abc";
  int b = -1000000000;
  char c='国';
  double d = -10000; 
  print(a,b,c,d);
}

1.现实世界是由很多对象组成的
2.现实世界是先有对象，再抽出类
  代码中先创建类，再创建对象
3.一个类可以创建多个对象
  同一个类的多个对象，结构相同，数据不同

4.类是一种数据类型
  只能包含:
    1)描述对象所共有的特征:------变量
          属性-----静的
    2)对象所共有的行为:----------方法
          行为-----动的


class Teacher{
   String name;
   int age;
   String address;
   double salary;
   
   void teach(){
   }
   void eat(){
   }
   void sleep(){
   }
}

class Student{   //学生类
   String name;
   int age;
   String address;
   void eat(){ }
   void sleep(){ }
   void study(){ }
}
class StudentTest{   //测试类都包含main
   main(){
//      int[] arr = new  int[4];//0,0,0,0
//      Student zs = new Student();
      Student zs = new Student();
      zs.name = "zhangsan";   //必须类里面有才能zs.
      zs.age = 25;
      zs.address = "河北廊坊";
      zs.eat();
      zs.sleep();
      zs.study();

      Student ls = new Student();
      ls.name = "lisi";
      ls.age = 18;
      ls.address = "黑龙江佳木斯";
      ls.eat();
      ls.sleep();
      ls.study();
      Student ww = new Student();
   }
}

//练习:
1.创建Student类，包含:
    特征: name,age,address
    行为: study(),sayHi()---输出3个变量的值
2.创建StudentTest类，包含main()方法
    main方法中:
      1)创建Student对象zs
        给变量赋值，调用方法
      2)创建Student对象ls
        给变量赋值，调用方法

Student zs = new Student(); //创建对象



英雄机:
  特征:
    width，height，x，y，image
  行为:
    move()，shoot()

小蜜蜂:
  特征:
    width, height, x, y, image
  行为:
    move()



类         对象
月饼模子   月饼
图纸       高楼

class Student{  //学生类
}

Student zs = new Student();
Student ls = new Student();
Student ww = new Student();


学员管理系统:
对象:
  学员
  老师
  教室
  课程
抽出类:
  class Student{   //学生类
  }
  class Teacher{   //老师类
  }
  class ClassRoom{ //教室类
  }
  class Course{    //课程类
  }

  //创建对象
  //Scanner和Random就是类
  Scanner scan = new Scanner(System.in);
  Random rand = new Random();

  创建对象语法:
  类名  名 = new  类名();