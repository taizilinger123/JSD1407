http://how2j.cn/?p=72711
CREATE TABLE employee(
  id NUMBER(4),
  name VARCHAR2(20) NOT NULL,
  gender CHAR(1) DEFAULT 'M',
  birth DATE,
  salary NUMBER(6,2),
  job VARCHAR2(30),
  deptno NUMBER(2)
);

DESC table_name;查看表结构
看到表的列的名字，以及对应的类型，长度等

删除一张表的语法
DROP  TABLE table_name;
DROP TABLE employee;

DEFAULT关键字
用于为给定的列(字段)设置默认值
在sql语句中用单引号表示字符串
数据库中字段无论是什么类型，默认值都是NULL若使用DEFAULT指定了默认值，则使用指定的.

NOT NULL约束
在创建表的时候可以为列添加非空约束，被约束的列在插入数据时必须给值。此列不允许为空。

修改表名
RENAME old_name TO new_name;
需要注意：新的表名不能是数据库中现有的表

修改表：
为表添加新的字段(列),总是在表的最后一列追加
ALTER TABLE emp ADD (hiredate DATE DEFAULT sysdate);
sysdate是一个日期的值，表示当前系统时间。

从表中删除一列
ALTER TABLE emp DROP (hiredate);

修改表中现有的列
ALTER TABLE emp MODIFY (job VARCHAR2(40) DEFAULT 'CLERK');
修改表字段时的注意事项：
1:尽量不修改字段类型
2:字段长度尽量不要减少
3:修改后的字段，只对新插入的数据产生影响，修改字段前的所有数据不影响。

DML操作
向表中插入数据
INSERT INTO  table_name (id,name,salary)VALUES(1,'范传奇',1500);
INSERT INTO  table_name  VALUES(1,'范传奇',22,'男',1500);
INSERT INTO emp(id,name,salary) VALUES(1,'boss',1500);

INSERT语句是向表中插入数据
INSERT语句指定的列对应的值会被插入到表中没有列举的列会插入NULL,但是，若该列有设置
默认值(DEFAULT关键字设置的),那么就插入设置的默认值。
若某列为NOT NULL,执行INSERT语句时又没有指定该列，那么插入会抛出违反为空约束的异常

执行INSERT语句时，若没有指定插入任何列，那么就是全列插入，注意，给的值顺序必须与表中
列的顺序完全一致，并且不能忽略任何一个列的值

查询表数据
SELECT * FROM emp;

事务控制：

COMMIT
用于提交事务。

ROLLBACK(在insert以后commit之前执行有效)
用于回滚事务。那么本次事务中所有的增删改操作全部失效。

TO_DATE()函数
TO_DATE('2009-09-01','YYYY-MM-DD')
INSERT INTO emp(id,name,birth) VALUES(1,'jack',TO_DATE('1990-09-01','YYYY-MM-DD'));

UPDATE emp SET salary = 8500 WHERE name='jack';
UPDATE emp SET salary = 6000,job='MANAGER' WHERE name='tom';
注意：通常情况下，更改表时，要添加WHERE来指定过滤条件，若不指定WHERE则是全表修改通常不会这样做。

select * from emp;

从表中删除数据
DELETE FROM  emp  WHERE name='tom';
删除数据时更要注意，添加WHERE,否则是全表删除。

TRUNCATE TABLE emp;不可回退

CREATE TABLE account(
    id NUMBER(9) NOT NULL,
    recommender_id NUMBER(9),
    login_name VARCHAR2(30) NOT NULL,
    login_passwd VARCHAR2(8) NOT NULL,
    status CHAR(1),
    create_date DATE DEFAULT SYSDATE,
    pause_date DATE,
    close_date DATE,
    real_name VARCHAR2(20) NOT NULL,
    idcard_no CHAR(18) NOT NULL,
    birthdate DATE,
    gender CHAR(1) NOT NULL,
    occupation VARCHAR2(50),
    telephone VARCHAR2(15) NOT NULL,
    email VARCHAR2(50),
    mailaddress VARCHAR2(50),
    zipcode CHAR(6),
    qq VARCHAR2(15),
    last_login_time DATE,
    last_login_ip VARCHAR2(15)
)

test09:
1:RENAME account TO t_account;
2:ALTER TABLE t_account ADD(bak VARCHAR2(50));
3:ALTER TABLE t_account MODIFY(bak VARCHAR2(40) DEFAULT 'login');
4:ALTER TABLE t_account DROP(bak);

test10:
INSERT INTO t_account(id,login_name,login_passwd,create_date,real_name,idcard_no,telephone)
VALUES(1,'shiyl','256528',TO_DATE('2008-01-28','yyyy-mm-dd'),'shiyuanli','410381194302256523','13669251234');

Test11:
UPDATE t_account SET login_passwd='801206' WHERE id=1;

test12:
DELETE FROM t_account WHERE id=1;

LONG:存储变长字符串
CLOB:存储定长或变长字符串

||在数据库中是连接字符串，相当于java中的"+"
注意和java中的"||"区分。
例如：
  java中  "hello"+"world" ==> "helloworld"
  DB中    'hello'||'world' ==> 'helloworld'
  oracle中  CONCAT('hello','world') ==>'helloworld'
  
  'think'||'in'||'java'
  CONCAT(CONCAT('think','in'),'java')

快速入门SELECT

SELECT *(全列查找) FROM table_name;

SELECT id,name,sal(指定查询表中的某几列)  FROM emp;

CREATE TABLE dept(
	deptno NUMBER(2),
	dname VARCHAR2(14) ,
	loc VARCHAR2(13) ) ;

CREATE TABLE emp(
	empno NUMBER(4),
	ename VARCHAR2(10),
	job VARCHAR2(9),
	mgr NUMBER(4),
	hiredate DATE,
	sal NUMBER(7,2),
	comm NUMBER(7,2)，
	deptno NUMBER(2)
);
INSERT INTO dept VALUES(10,'ACCOUNTING','NEW YORK');
INSERT INTO dept VALUES(20,'RESEARCH','DALLAS');
INSERT INTO dept VALUES(30,'SALES','CHICAGO');
INSERT INTO dept VALUES(40,'OPERATIONS','BOSTON');
INSERT INTO emp VALUES(7369,'SMITH','CLERK',7902,to_date('17-12-1980','dd-mm-yyyy'),800,NULL,20);
INSERT INTO emp VALUES(7499,'ALLEN','SALESMAN',7698,to_date('20-2-1981','dd-mm-yyyy'),1600,300,30);
INSERT INTO emp VALUES(7521,'WARD','SALESMAN',7698,to_date('22-2-1981','dd-mm-yyyy'),1250,500,30);
INSERT INTO emp VALUES(7566,'JONES','MANAGER',7839,to_date('2-4-1981','dd-mm-yyyy'),2975,NULL,20);
INSERT INTO emp VALUES(7654,'MARTIN','SALESMAN',7698,to_date('28-9-1981','dd-mm-yyyy'),1250,1400,30);
INSERT INTO emp VALUES(7698,'BLAKE','MANAGER',7839,to_date('1-5-1981','dd-mm-yyyy'),2850,NULL,30);
INSERT INTO emp VALUES(7782,'CLARK','MANAGER',7839,to_date('9-6-1981','dd-mm-yyyy'),2450,NULL,10);
INSERT INTO emp VALUES(7788,'SCOTT','ANALYST',7566,to_date('19-4-87','dd-mm-yyyy'),3000,NULL,20);
INSERT INTO emp VALUES(7839,'KING','PRESIDENT',NULL,to_date('17-11-1981','dd-mm-yyyy'),5000,NULL,10);
INSERT INTO emp VALUES(7844,'TURNER','SALESMAN',7698,to_date('8-9-1981','dd-mm-yyyy'),1500,0,30);
INSERT INTO emp VALUES(7876,'ADAMS','CLERK',7788,to_date('23-5-87','dd-mm-yyyy'),1100,NULL,20);
INSERT INTO emp VALUES(7900,'JAMES','CLERK',7698,to_date('3-12-1981','dd-mm-yyyy'),950,NULL,30);
INSERT INTO emp VALUES(7902,'FORD','ANALYST',7566,to_date('3-12-1981','dd-mm-yyyy'),3000,NULL,20);
INSERT INTO emp VALUES(7934,'MILLER','CLERK',7782,to_date('23-1-1982','dd-mm-yyyy'),1300,NULL,10);

//只查询三列的值
SELECT * FROM emp;
SELECT empno,ename,job FROM emp;
SELECT 1 FROM emp;
SELECT 'hello'||'world' FROM DUAL;(虚表)
DUAL:虚表，没有这么一个表，只为了满足SELECT的语法要求。
我们常用虚表来测试表达式的结果。
在数据库中，我们想测试某个表达式的结果只能使用SELECT语句来实现。

什么时候使用虚表：当SELECT语句中没有任何表中的字段参与时。
SELECT CONCAT('hello','world') FROM DUAL;
SELECT ename,sal FROM emp;
SELECT ename||':'||sal FROM emp;
SELECT CONCAT(CONCAT(ename,':'),sal) FROM emp;
输出SMITH:8000
SELECT ename,LENGTH(ename) FROM emp;
SELECT UPPER('hello world'),LOWER('HELLO WORLD'),INITCAP('hello world') FROM DUAL;
SELECT UPPER(ename),LOWER(ename),INITCAP(ename) FROM DUAL;
SELECT TRIM('e' from 'eeeeeliteeeeee') FROM DUAL; 
参数中from前面只能是单一字符，若没有from以及前面的字符，则是去除空白
SELECT LTRIM('eeeeeliteeeeee','e') FROM DUAL;
SELECT RTRIM('eeeeeliteeeeee','e') FROM DUAL; 
SELECT RTRIM('eeeeeliteeeeee','E') FROM DUAL;字符串是区分大小写的
同样的，不指定第二个参数，默认是去除空白
SELECT LPAD('AAA',5,'$') FROM DUAL;
SELECT LPAD('AAAAAA',5,'$') FROM DUAL;
SELECT LPAD('aaaaAAAAAA',5,'$') FROM DUAL;
SELECT RPAD('aaaaAAAAAA',5,'$') FROM DUAL;
SELECT SUBSTR('Doctor Who travels in TARDIS',8,3) FROM DUAL;//从1开始到第8个W连续取3个Who,oracle是从1开始算
SELECT SUBSTR('Doctor Who travels in TARDIS',0,6) FROM DUAL;//Doctor
SELECT SUBSTR('Doctor Who travels in TARDIS',-6,6) FROM DUAL;//TARDIS
SELECT SUBSTR('Doctor Who travels in TARDIS',-6,0) FROM DUAL;//null
SELECT SUBSTR('Doctor Who travels in TARDIS',-6,-1) FROM DUAL;//null
SELECT SUBSTR('Doctor Who travels in TARDIS',1) FROM DUAL;//Doctor Who travels in TARDIS,从1一直取到字符串的末尾
SELECT INSTR('Doctor Who','Who') as "words" FROM DUAL;//8根java的indexOf一样，返回Who的W在哪个位置
SELECT INSTR('Doctor Who Who Who','Who', 9) as "words" FROM DUAL;//从第9个位置取Who第一次出现的位置为12
SELECT INSTR('Doctor Who Who Who','Who', 9,2) as "words" FROM DUAL;//从第9个位置取第二次出现Who的位置为16
SELECT INSTR('Doctor Who Who Who','Who', 9,3) as "words" FROM DUAL;//没找到返回0,数据库从1开始，java从0开始没找到返回-1.
SELECT ROUND(45.678, 2) FROM DUAL;--45.68四舍五入oracle里单行注释--
SELECT ROUND(45.678, 0) FROM DUAL;--46
SELECT ROUND(45.678, -1) FROM DUAL;--50
SELECT ROUND(45.678, -2) FROM DUAL;--0，看十位是否大于等于5，大于等于5进位
SELECT ROUND(55.678, -2) FROM DUAL;--100
SELECT TRUNC(45.678, 2) FROM DUAL;--45.67
SELECT TRUNC(45.678, 0) FROM DUAL;--45
SELECT TRUNC(45.678, -1) FROM DUAL;--40
SELECT ename,sal, MOD(sal, 1000) FROM emp;
SELECT CEIL(45.678) FROM DUAL;--46
SELECT FLOOR(45.678) FROM DUAL;--45
DATE,TIMESTAMP,SELECT SYSDATE FROM DUAL;
SELECT SYSTIMESTAMP  FROM DUAL;
SELECT TO_DATE('2008-08-12 22:45:33','yyyy-mm-dd hh24:mi:ss') FROM DUAL;  //12-8月 -08,将字符串格式的时间转成日期形式
TO_CHAR()格式字符串中出现汉字需要用双引号。
SELECT TO_CHAR(sysdate, 'yyyy"年"mm"月"dd"日" hh:mi:ss') FROM DUAL; //将日期时间转换成字符串形式
SELECT TO_CHAR(sysdate, 'yyyy"year"mm"month"dd"day" hh:mi:ss') FROM DUAL;
在日期格式字符串中，出现的非关键字符或符号的其他字符时，需要使用双引号。
两个日期可以进行减法操作，差为相差的天数。
SELECT sysdate-hiredate,ename FROM emp;
SELECT FLOOR(sysdate-hiredate),hiredate,ename FROM emp;
SELECT LAST_DAY(SYSDATE) FROM DUAL;
SELECT LAST_DAY('20-2月-09') FROM DUAL;
SELECT ename,ADD_MONTHS(hiredate, 20*12) as "20周年" FROM emp;
SELECT ename,FLOOR(MONTHS_BETWEEN(SYSDATE,hiredate)) FROM emp;
SELECT NEXT_DAY(SYSDATE,5) FROM dual;//获取距离当前时间最近的周4，若给定的当前时间恰巧是周4，则表示的是下周的周4.
SELECT LEAST(SYSDATE, '10-10月-08') FROM DUAL;//返回10-10月-08
SELECT GREATEST(SYSDATE, '10-10月-08') FROM DUAL;//返回sysdate当前系统时间
SELECT EXTRACT(YEAR FROM SYSDATE) CURRENT_YEAR FROM DUAL;
SELECT EXTRACT(HOUR FROM TIMESTAMP '2008-10-10 10:10:10') FROM DUAL;
CREATE TABLE  student (id NUMBER(4), name CHAR(20), gender CHAR(1));
INSERT INTO student VALUES(1000, '李莫愁','F');
INSERT INTO student VALUES(1001, '林平之', NULL);
INSERT INTO student(id, name) VALUES(1002, '张无忌');
select * from student where gender is not null;
select * from student where gender is null;
null和任何数字运算结果还是null
SELECT name, NVL(gender,'M') FROM student;
NVL函数的作用：将null替换为给定的值
SELECT ename,sal,NVL(comm,0) FROM emp;//有值就返回comm对应的值，值为null就返回0
SELECT ename,sal+NVL(comm,0) FROM emp;//comm是奖金
SELECT ename,NVL2(comm,sal+comm,sal) FROM emp;
SELECT ename,NVL2(comm,'有奖金','没奖金') FROM emp;
SELECT ENAME id FROM emp;  //id变大写
SELECT ENAME "id" FROM emp; //"id"小写了
SELECT ENAME "i d" FROM emp;//"i d"分开了
SELECT TO_CHAR(hiredate,'yyyy-mm-dd') hiredate FROM emp; //给起了别名
SELECT ename, sal, job FROM emp WHERE sal > 1000 AND job = 'CLERK' OR job = 'SALESMAN';//and的优先级高于or的,工资大于1000的clerk,job是salesman
SELECT ename, sal, job FROM emp WHERE sal > 1300 AND (job = 'CLERK' OR job = 'SALESMAN');//job为clerk或者为salesman的并且工资大于1300
SELECT ename,job FROM emp WHERE ename LIKE '_A%';//like字符串的模糊查询
SELECT ename,sal,job FROM emp WHERE job IN ('MANAGER','SALESMAN','CLERK');//job=manager or job=salesman or job=clerk
SELECT ename,sal,job FROM emp WHERE job NOT IN ('MANAGER','SALESMAN','CLERK');
SELECT ename,sal FROM emp WHERE sal BETWEEN 1500 AND 3000;//between 小值  and 大值
SELECT empno,ename,job,sal,deptno FROM emp WHERE sal > ANY (3500, 4000, 4500);//>ANY大于最小的，<ANY小于最大的，>ALL大于最大的，<ALL小于最小的
any和all与in的相同之处：都是给定一组数据进行比较
区别：in是与给定的数据进行等值或不等值比较，all和any是与给定数据进行范围比较
select ename,sal,job from emp where ename = UPPER('scott');//UPPER函数
select ename,sal,job from emp where sal*12 > 10000;//表达式
SELECT DISTINCT job FROM emp;//去掉重复job行,对单列去重，就一列的值没有重复的
SELECT DISTINCT deptno, job  FROM emp;//对多列去重，可以达到的效果是，这几列的组合是不重复的
SELECT ename, deptno  FROM emp ORDER BY deptno DESC;//order by只能出现在select语句最后,DESC是降序
update emp set deptno=10 where ename='FORD';
SELECT ename, deptno, sal  FROM emp ORDER BY sal,deptno;
SELECT ename, deptno, sal  FROM emp ORDER BY sal DESC,deptno;//按照deptno升序排列，当deptno相同时候再按照sal的降序排序
SELECT MAX(sal) max_sal,MIN(sal) min_sal from emp;
SELECT MAX(hiredate) max_hire,MIN(hiredate) min_hire FROM emp;//min最早的入职，max最晚的入职
SELECT AVG(sal),SUM(sal) FROM emp; 
SELECT AVG(comm) FROM emp; 
SELECT AVG(NVL(comm,0)) FROM emp; 
SELECT COUNT(*) FROM emp WHERE deptno=20;
SELECT MAX(sal),MIN(sal),AVG(sal),SUM(sal),deptno FROM emp GROUP BY deptno;//查看每个部门中每种职位的工资情况
//只要在select中使用了分组函数，那么，select中其他非分组函数的列若出现，那么也必须同时出现在group by子句中。反过来没有限制。
//若group by中出现了多列，那么就按照这几列组合值相同的记录看做一组
SELECT deptno,AVG(sal) FROM emp GROUP BY deptno HAVING AVG(sal)>1800;
having用于在进行分组查询后，二次过滤数据的
having不能独立存在，必须跟在group by之后。having中可以使用组函数的结果进行过滤
与where的区别在于：
where是用于第一次检索数据时过滤的。
having是用于在检索后，进行二次过滤的
select->from->where->group by->having->order by
select deptno,dname from dept;
select ename,deptno from emp;
SELECT ename,dname FROM emp,dept;
SELECT ename,dname FROM emp,dept Where emp.deptno = dept.deptno;
SELECT ename,dname,e.deptno FROM emp e,dept d Where e.deptno = d.deptno;
SELECT ename,dname,sal FROM emp e,dept d Where e.deptno = d.deptno AND sal>2500;
SELECT e.ename,d.dname FROM emp e,dept d WHERE e.deptno=d.deptno AND d.dname='SALES';
SELECT d.loc FROM emp e,dept d WHERE e.deptno = d.deptno AND e.ename='FORD';
n张表联合查询，必须要有n-1个连接条件
SELECT e.ename,d.dname FROM emp e,dept d WHERE e.deptno = d.deptno;//与下面的内连接等价
SELECT e.ename,d.dname FROM emp e JOIN dept d ON(e.deptno=d.deptno);
SELECT e.ename,d.dname FROM emp e NATURAL JOIN dept d;//自然连接会自动寻找两张表列名相同的做等值连接。注意，两张表中应当只有一列名字相同才可以使用自然连接。
外连接的应用场景：
当我们查看部门表时，因为在进行与emp连接查询时，40号部门不存在任何员工，导致查询结果该记录被忽略。这时若我们需要主要查看部门有哪些时，就使用外连接。
SELECT * FROM dept;
SELECT * FROM emp;
SELECT d.dname,e.ename FROM emp e,dept d WHERE d.deptno=e.deptno;
SELECT d.dname,e.ename FROM emp e RIGHT OUTER JOIN dept d ON(d.deptno=e.deptno);//右外连接
UPDATE emp SET deptno=50 WHERE ename='FORD';
SELECT d.dname,e.ename FROM emp e LEFT OUTER JOIN dept d ON(d.deptno=e.deptno);//左外连接
SELECT d.dname,e.ename FROM emp e FULL OUTER JOIN dept d ON(d.deptno=e.deptno);//全外连接
SELECT e.ename,m.ename  FROM emp e, emp m WHERE e.mgr=m.empno;//自连接
SELECT e.ename||'的领导是'||m.ename  FROM emp e, emp m WHERE e.mgr=m.empno; 
eg:SELECT s.name,f.name FROM menu s,menu f WHERE s.f_id=f.id;
//作业
SELECT ename,deptno FROM emp WHERE deptno IN(20,30);
SELECT ename,job FROM emp WHERE mgr IS NULL ORDER BY job;
SELECT ename,sal,comm FROM emp WHERE comm IS NOT NULL ORDER BY sal DESC;
SELECT ename FROM emp WHERE ename LIKE '__A%';
SELECT ename||','||job||','||sal AS "OUT_PUT" FROM emp;
SELECT empno,ename,sal,sal*1.2 FROM emp;
SELECT ename,sal FROM emp WHERE sal>1200 ORDER BY hiredate;
SELECT deptno,dname,loc FROM dept WHERE dname <> 'ACCOUNT';
子查询
当前查询需要建立在另一个查询的结果基础之上，这里就要利用到子查询.
单行单列和多行单列子查询通常用在where子查询中，多行多列子查询通常用在from当中
SELECT ename,sal,deptno FROM emp WHERE deptno = (SELECT deptno FROM emp WHERE ename = 'SCOTT')
SELECT ename,sal,deptno FROM emp WHERE deptno = (SELECT deptno FROM emp WHERE ename = 'SCOTT') AND ename<>'SCOTT';
SELECT ename,sal,deptno FROM emp WHERE sal> (SELECT sal FROM emp WHERE ename = 'SCOTT');
> < >= <= = <>这些比较都只能使用单行单列子查询
SELECT ename,sal FROM emp WHERE sal<(SELECT AVG(sal) FROM emp); 
SELECT ename,job,deptno FROM emp WHERE deptno IN(SELECT deptno FROM emp WHERE job='SALESMAN')  AND job <> 'SALESMAN';//多行单列子查询用in
SELECT ename,sal FROM emp WHERE sal>ANY(SELECT sal FROM emp WHERE job='SALESMAN');
SELECT deptno,dname FROM dept d WHERE EXISTS (SELECT * FROM emp e WHERE d.deptno=e.deptno);
SELECT deptno,MIN(sal) FROM emp GROUP BY deptno HAVING MIN(sal)>(SELECT MIN(sal) FROM emp WHERE deptno=30);
SELECT deptno,ename,sal FROM emp e1 WHERE e1.sal>(SELECT AVG(sal) FROM emp e2 WHERE e1.deptno = e2.deptno );
SELECT ename,sal,deptno FROM emp e,(SELECT deptno, AVG(sal) avgsal FROM emp GROUP BY deptno) a WHERE e.deptno = a.deptno AND e.sal > a.avgsal;
//在from子句中出现了子查询，那么意味着我们要将子查询的结果当做一张表去看待，从中再次查询想要的结果。那么就应当注意：子查询的SELECT语句中，出现了非字段名的字段（通常是表达式或者函数），那么一定要给他们加上别名。
SELECT ename,sal,(SELECT dname FROM dept d WHERE d.deptno = e.deptno) FROM emp e;
SELECT ROWNUM,ename,sal FROM emp;//ROWNUM是当oracle进行select查询表数据时，确定一条数据需要时，才会对其进行编号(伪劣的值)，这就导致，没有数据被查出前，rownum永远
没有值。所以rownum不能在第一次查询时作为where条件。
rownum:有数据了才有值
where里出现：有值才有数据
所以这里有一个矛盾
分页的三步：
1：排序
2：编号
3：取范围
分页：SELECT * FROM (SELECT ROWNUM rw,e.* FROM (SELECT empno,ename,sal FROM emp ORDER BY empno)e ) WHERE rw BETWEEN 1 AND 3;
mysql:limit(1,3)
分页的算法:page页数    pagesize一页的条数
(page-1)*pagesize+1  start 
page*pagesize        end 
SELECT ename, job, sal, DECODE(job,
                                     'MANAGER', sal * 1.2,
                                     'ANALYST', sal * 1.1, 
                                     'SALESMAN', sal * 1.05, 
                                      sal)bonus 
FROM emp;//decode和switch一样

SELECT ename, job, sal,
   CASE job WHEN 'MANAGER' THEN sal*1.2
            WHEN 'ANALYST' THEN sal*1.1
            WHEN 'SALESMAN' THEN sal*1.05
            ELSE sal END
   bonus 
FROM emp;

SELECT * FROM dept ORDER BY DECODE(dname,
                                      'OPERATIONS',0,
                                       'ACCOUNTING',1,
                                       'SALES',2,
                                       3);
//20号部门一组，其他部门是另一组
思路：将其他不同部门的值改成相同的值即可                                       
SELECT SUM(sal),DECODE(deptno,20,'20','other') deptno FROM emp GROUP BY DECODE(deptno,20,'20','other');
SELECT ename,sal,deptno,ROW_NUMBER() OVER(PARTITION BY deptno ORDER BY sal DESC) rank  FROM emp;//组内排名,根据deptno分组，再根据sal排序
row_number():生成组内连续且唯一的编号
SELECT ename,sal,deptno,RANK() OVER(PARTITION BY deptno ORDER BY sal DESC) rank  FROM emp;
//rank():生成组内不连续且不唯一的编号,排序的列若值相同，会得到相同的编号
SELECT ename,sal,deptno,DENSE_RANK() OVER(PARTITION BY deptno ORDER BY sal DESC) rank  FROM emp;
//dense_rank():生成组内连续但不唯一的编号
SELECT ename,job,sal FROM emp WHERE job='MANAGER' UNION SELECT ename,job,sal FROM emp WHERE sal>2500;//或
SELECT ename,job,sal FROM emp WHERE job='MANAGER' UNION ALL SELECT ename,job,sal FROM emp WHERE sal>2500;//或
SELECT ename,job,sal FROM emp WHERE job='MANAGER' INTERSECT SELECT ename,job,sal FROM emp WHERE sal>2500;//and且
SELECT ename,job,sal FROM emp WHERE job='MANAGER' MINUS  SELECT ename,job,sal FROM emp WHERE sal>2500;//job是manager并且sal小于2500,我有你没有的
CREATE TABLE sales_tab(
     year_id NUMBER NOT NULL,
    month_id NUMBER NOT NULL,
    day_id NUMBER NOT NULL,
    sales_value NUMBER(10,2) NOT NULL
);
INSERT INTO sales_tab 
SELECT TRUNC(DBMS_RANDOM.value(2010,2012)) AS year_id,
       TRUNC(DBMS_RANDOM.value(1,13)) AS month_id,
       TRUNC(DBMS_RANDOM.value(1,32)) AS day_id,
       ROUND(DBMS_RANDOM.value(1,100),2) AS sales_value  
FROM dual 
CONNECT BY level <=1000;
COMMIT;

select * from sales_tab;
select * from sales_tab ORDER BY year_id,month_id,day_id;
SELECT SUM(sales_value) FROM sales_tab GROUP BY year_id,month_id,day_id  
UNION ALL SELECT SUM(sales_value) FROM sales_tab GROUP BY year_id,month_id
UNION ALL SELECT SUM(sales_value) FROM sales_tab GROUP BY year_id 
UNION ALL SELECT SUM(sales_value) FROM sales_tab;
等同于下面的rollup语句
SELECT year_id,month_id,day_id,SUM(sales_value) FROM sales_tab GROUP BY ROLLUP(year_id,month_id,day_id) ORDER BY year_id,month_id,day_id;
GROUP BY ROLLUP(a,b,c)//abc ab a 整体
GROUP BY CUBE(y,m,d)//ymd,ym,yd,md,y,m,d,整体一次,2的3次方
北京市在校学生信息
学校  年级   班级    学生名
SELECT 学校， 年级， 班级， COUNT(*) FROM 在校学生信息   GROUP BY ROLLUP(学校，年级， 班级)
SELECT year_id,month_id,day_id,SUM(sales_value) FROM sales_tab GROUP BY CUBE(year_id,month_id,day_id) ORDER BY year_id,month_id,day_id;
SELECT year_id,month_id,day_id,SUM(sales_value) FROM sales_tab GROUP BY GROUPING SETS((year_id,month_id,day_id),(year_id,month_id)) ORDER BY year_id,month_id,day_id;
CREATE VIEW v_emp_10  
AS 
SELECT empno,ename,sal,deptno
FROM emp
WHERE deptno = 10;
DESC  v_emp_10;
CREATE OR REPLACE VIEW v_emp_10 AS SELECT empno id,ename name, sal salary, deptno deptno FROM emp WHERE deptno = 10;//修改同名视图sql语句
SELECT * FROM  v_emp_10;//查询视图
SELECT name,salary  FROM  v_emp_10;//只能用别名去查
尽量避免使用DML操作视图,几乎不成功
CREATE OR REPLACE VIEW v_emp_10 AS SELECT empno id,ename name, sal salary, deptno deptno FROM emp WHERE deptno = 10 WITH CHECK OPTION;//加 WITH CHECK OPTION就不能随便修改视图了
/*
INSERT INTO v_emp_10 VALUES(1008,'donna',5500,20);
UPDATE v_emp_10 SET deptno = 20 WHERE id = 7782;
INSERT INTO v_emp_10 VALUES(1008,'donna',5500,20)
错误报告:
SQL 错误: ORA-01402: 视图 WITH CHECK OPTION where 子句违规
01402. 00000 -  "view WITH CHECK OPTION where-clause violation"
*Cause:    
*Action:
*/
CREATE OR REPLACE VIEW v_emp_10 AS SELECT empno id,ename name, sal salary, deptno deptno FROM emp WHERE deptno = 10 WITH READ ONLY;//把视图改成只读,不能随便修改


