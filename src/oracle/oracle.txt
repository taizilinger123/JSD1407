http://how2j.cn/?p=72711
CREATE TABLE employee(
  id NUMBER(4),
  name VARCHAR2(20) NOT NULL,
  gender CHAR(1) DEFAULT 'M',
  birth DATE,
  salary NUMBER(6,2),
  job VARCHAR2(30),
  deptno NUMBER(2)
);

DESC table_name;查看表结构
看到表的列的名字，以及对应的类型，长度等

删除一张表的语法
DROP  TABLE table_name;
DROP TABLE employee;

DEFAULT关键字
用于为给定的列(字段)设置默认值
在sql语句中用单引号表示字符串
数据库中字段无论是什么类型，默认值都是NULL若使用DEFAULT指定了默认值，则使用指定的.

NOT NULL约束
在创建表的时候可以为列添加非空约束，被约束的列在插入数据时必须给值。此列不允许为空。

修改表名
RENAME old_name TO new_name;
需要注意：新的表名不能是数据库中现有的表

修改表：
为表添加新的字段(列),总是在表的最后一列追加
ALTER TABLE emp ADD (hiredate DATE DEFAULT sysdate);
sysdate是一个日期的值，表示当前系统时间。

从表中删除一列
ALTER TABLE emp DROP (hiredate);

修改表中现有的列
ALTER TABLE emp MODIFY (job VARCHAR2(40) DEFAULT 'CLERK');
修改表字段时的注意事项：
1:尽量不修改字段类型
2:字段长度尽量不要减少
3:修改后的字段，只对新插入的数据产生影响，修改字段前的所有数据不影响。

DML操作
向表中插入数据
INSERT INTO  table_name (id,name,salary)VALUES(1,'范传奇',1500);
INSERT INTO  table_name  VALUES(1,'范传奇',22,'男',1500);
INSERT INTO emp(id,name,salary) VALUES(1,'boss',1500);

INSERT语句是向表中插入数据
INSERT语句指定的列对应的值会被插入到表中没有列举的列会插入NULL,但是，若该列有设置
默认值(DEFAULT关键字设置的),那么就插入设置的默认值。
若某列为NOT NULL,执行INSERT语句时又没有指定该列，那么插入会抛出违反为空约束的异常

执行INSERT语句时，若没有指定插入任何列，那么就是全列插入，注意，给的值顺序必须与表中
列的顺序完全一致，并且不能忽略任何一个列的值

查询表数据
SELECT * FROM emp;

事务控制：

COMMIT
用于提交事务。

ROLLBACK(在insert以后commit之前执行有效)
用于回滚事务。那么本次事务中所有的增删改操作全部失效。

TO_DATE()函数
TO_DATE('2009-09-01','YYYY-MM-DD')
INSERT INTO emp(id,name,birth) VALUES(1,'jack',TO_DATE('1990-09-01','YYYY-MM-DD'));

UPDATE emp SET salary = 8500 WHERE name='jack';
UPDATE emp SET salary = 6000,job='MANAGER' WHERE name='tom';
注意：通常情况下，更改表时，要添加WHERE来指定过滤条件，若不指定WHERE则是全表修改通常不会这样做。

select * from emp;

从表中删除数据
DELETE FROM  emp  WHERE name='tom';
删除数据时更要注意，添加WHERE,否则是全表删除。

TRUNCATE TABLE emp;不可回退

CREATE TABLE account(
    id NUMBER(9) NOT NULL,
    recommender_id NUMBER(9),
    login_name VARCHAR2(30) NOT NULL,
    login_passwd VARCHAR2(8) NOT NULL,
    status CHAR(1),
    create_date DATE DEFAULT SYSDATE,
    pause_date DATE,
    close_date DATE,
    real_name VARCHAR2(20) NOT NULL,
    idcard_no CHAR(18) NOT NULL,
    birthdate DATE,
    gender CHAR(1) NOT NULL,
    occupation VARCHAR2(50),
    telephone VARCHAR2(15) NOT NULL,
    email VARCHAR2(50),
    mailaddress VARCHAR2(50),
    zipcode CHAR(6),
    qq VARCHAR2(15),
    last_login_time DATE,
    last_login_ip VARCHAR2(15)
)

test09:
1:RENAME account TO t_account;
2:ALTER TABLE t_account ADD(bak VARCHAR2(50));
3:ALTER TABLE t_account MODIFY(bak VARCHAR2(40) DEFAULT 'login');
4:ALTER TABLE t_account DROP(bak);

test10:
INSERT INTO t_account(id,login_name,login_passwd,create_date,real_name,idcard_no,telephone)
VALUES(1,'shiyl','256528',TO_DATE('2008-01-28','yyyy-mm-dd'),'shiyuanli','410381194302256523','13669251234');

Test11:
UPDATE t_account SET login_passwd='801206' WHERE id=1;

test12:
DELETE FROM t_account WHERE id=1;

LONG:存储变长字符串
CLOB:存储定长或变长字符串

||在数据库中是连接字符串，相当于java中的"+"
注意和java中的"||"区分。
例如：
  java中  "hello"+"world" ==> "helloworld"
  DB中    'hello'||'world' ==> 'helloworld'
  oracle中  CONCAT('hello','world') ==>'helloworld'
  
  'think'||'in'||'java'
  CONCAT(CONCAT('think','in'),'java')

快速入门SELECT

SELECT *(全列查找) FROM table_name;

SELECT id,name,sal(指定查询表中的某几列)  FROM emp;

CREATE TABLE dept(
	deptno NUMBER(2),
	dname VARCHAR2(14) ,
	loc VARCHAR2(13) ) ;

CREATE TABLE emp(
	empno NUMBER(4),
	ename VARCHAR2(10),
	job VARCHAR2(9),
	mgr NUMBER(4),
	hiredate DATE,
	sal NUMBER(7,2),
	comm NUMBER(7,2)，
	deptno NUMBER(2)
);
INSERT INTO dept VALUES(10,'ACCOUNTING','NEW YORK');
INSERT INTO dept VALUES(20,'RESEARCH','DALLAS');
INSERT INTO dept VALUES(30,'SALES','CHICAGO');
INSERT INTO dept VALUES(40,'OPERATIONS','BOSTON');
INSERT INTO emp VALUES(7369,'SMITH','CLERK',7902,to_date('17-12-1980','dd-mm-yyyy'),800,NULL,20);
INSERT INTO emp VALUES(7499,'ALLEN','SALESMAN',7698,to_date('20-2-1981','dd-mm-yyyy'),1600,300,30);
INSERT INTO emp VALUES(7521,'WARD','SALESMAN',7698,to_date('22-2-1981','dd-mm-yyyy'),1250,500,30);
INSERT INTO emp VALUES(7566,'JONES','MANAGER',7839,to_date('2-4-1981','dd-mm-yyyy'),2975,NULL,20);
INSERT INTO emp VALUES(7654,'MARTIN','SALESMAN',7698,to_date('28-9-1981','dd-mm-yyyy'),1250,1400,30);
INSERT INTO emp VALUES(7698,'BLAKE','MANAGER',7839,to_date('1-5-1981','dd-mm-yyyy'),2850,NULL,30);
INSERT INTO emp VALUES(7782,'CLARK','MANAGER',7839,to_date('9-6-1981','dd-mm-yyyy'),2450,NULL,10);
INSERT INTO emp VALUES(7788,'SCOTT','ANALYST',7566,to_date('19-4-87','dd-mm-yyyy'),3000,NULL,20);
INSERT INTO emp VALUES(7839,'KING','PRESIDENT',NULL,to_date('17-11-1981','dd-mm-yyyy'),5000,NULL,10);
INSERT INTO emp VALUES(7844,'TURNER','SALESMAN',7698,to_date('8-9-1981','dd-mm-yyyy'),1500,0,30);
INSERT INTO emp VALUES(7876,'ADAMS','CLERK',7788,to_date('23-5-87','dd-mm-yyyy'),1100,NULL,20);
INSERT INTO emp VALUES(7900,'JAMES','CLERK',7698,to_date('3-12-1981','dd-mm-yyyy'),950,NULL,30);
INSERT INTO emp VALUES(7902,'FORD','ANALYST',7566,to_date('3-12-1981','dd-mm-yyyy'),3000,NULL,20);
INSERT INTO emp VALUES(7934,'MILLER','CLERK',7782,to_date('23-1-1982','dd-mm-yyyy'),1300,NULL,10);

//只查询三列的值
SELECT * FROM emp;
SELECT empno,ename,job FROM emp;
SELECT 1 FROM emp;
SELECT 'hello'||'world' FROM DUAL;(虚表)
DUAL:虚表，没有这么一个表，只为了满足SELECT的语法要求。
我们常用虚表来测试表达式的结果。
在数据库中，我们想测试某个表达式的结果只能使用SELECT语句来实现。

什么时候使用虚表：当SELECT语句中没有任何表中的字段参与时。
SELECT CONCAT('hello','world') FROM DUAL;
SELECT ename,sal FROM emp;
SELECT ename||':'||sal FROM emp;
SELECT CONCAT(CONCAT(ename,':'),sal) FROM emp;
输出SMITH:8000
SELECT ename,LENGTH(ename) FROM emp;
SELECT UPPER('hello world'),LOWER('HELLO WORLD'),INITCAP('hello world') FROM DUAL;
SELECT UPPER(ename),LOWER(ename),INITCAP(ename) FROM DUAL;
SELECT TRIM('e' from 'eeeeeliteeeeee') FROM DUAL; 
参数中from前面只能是单一字符，若没有from以及前面的字符，则是去除空白
SELECT LTRIM('eeeeeliteeeeee','e') FROM DUAL;
SELECT RTRIM('eeeeeliteeeeee','e') FROM DUAL; 
SELECT RTRIM('eeeeeliteeeeee','E') FROM DUAL;字符串是区分大小写的
同样的，不指定第二个参数，默认是去除空白
SELECT LPAD('AAA',5,'$') FROM DUAL;
SELECT LPAD('AAAAAA',5,'$') FROM DUAL;
SELECT LPAD('aaaaAAAAAA',5,'$') FROM DUAL;
SELECT RPAD('aaaaAAAAAA',5,'$') FROM DUAL;
SELECT SUBSTR('Doctor Who travels in TARDIS',8,3) FROM DUAL;//从1开始到第8个W连续取3个Who,oracle是从1开始算
SELECT SUBSTR('Doctor Who travels in TARDIS',0,6) FROM DUAL;//Doctor
SELECT SUBSTR('Doctor Who travels in TARDIS',-6,6) FROM DUAL;//TARDIS
SELECT SUBSTR('Doctor Who travels in TARDIS',-6,0) FROM DUAL;//null
SELECT SUBSTR('Doctor Who travels in TARDIS',-6,-1) FROM DUAL;//null
SELECT SUBSTR('Doctor Who travels in TARDIS',1) FROM DUAL;//Doctor Who travels in TARDIS,从1一直取到字符串的末尾
SELECT INSTR('Doctor Who','Who') as "words" FROM DUAL;//8根java的indexOf一样，返回Who的W在哪个位置
SELECT INSTR('Doctor Who Who Who','Who', 9) as "words" FROM DUAL;//从第9个位置取Who第一次出现的位置为12
SELECT INSTR('Doctor Who Who Who','Who', 9,2) as "words" FROM DUAL;//从第9个位置取第二次出现Who的位置为16
SELECT INSTR('Doctor Who Who Who','Who', 9,3) as "words" FROM DUAL;//没找到返回0,数据库从1开始，java从0开始没找到返回-1.
SELECT ROUND(45.678, 2) FROM DUAL;--45.68四舍五入oracle里单行注释--
SELECT ROUND(45.678, 0) FROM DUAL;--46
SELECT ROUND(45.678, -1) FROM DUAL;--50
SELECT ROUND(45.678, -2) FROM DUAL;--0，看十位是否大于等于5，大于等于5进位
SELECT ROUND(55.678, -2) FROM DUAL;--100
SELECT TRUNC(45.678, 2) FROM DUAL;--45.67
SELECT TRUNC(45.678, 0) FROM DUAL;--45
SELECT TRUNC(45.678, -1) FROM DUAL;--40
SELECT ename,sal, MOD(sal, 1000) FROM emp;
SELECT CEIL(45.678) FROM DUAL;--46
SELECT FLOOR(45.678) FROM DUAL;--45
DATE,TIMESTAMP,SELECT SYSDATE FROM DUAL;
SELECT SYSTIMESTAMP  FROM DUAL;
SELECT TO_DATE('2008-08-12 22:45:33','yyyy-mm-dd hh24:mi:ss') FROM DUAL;  //12-8月 -08,将字符串格式的时间转成日期形式
TO_CHAR()格式字符串中出现汉字需要用双引号。
SELECT TO_CHAR(sysdate, 'yyyy"年"mm"月"dd"日" hh:mi:ss') FROM DUAL; //将日期时间转换成字符串形式
SELECT TO_CHAR(sysdate, 'yyyy"year"mm"month"dd"day" hh:mi:ss') FROM DUAL;
在日期格式字符串中，出现的非关键字符或符号的其他字符时，需要使用双引号。
两个日期可以进行减法操作，差为相差的天数。
SELECT sysdate-hiredate,ename FROM emp;
SELECT FLOOR(sysdate-hiredate),hiredate,ename FROM emp;
SELECT LAST_DAY(SYSDATE) FROM DUAL;
SELECT LAST_DAY('20-2月-09') FROM DUAL;
SELECT ename,ADD_MONTHS(hiredate, 20*12) as "20周年" FROM emp;
SELECT ename,FLOOR(MONTHS_BETWEEN(SYSDATE,hiredate)) FROM emp;
SELECT NEXT_DAY(SYSDATE,5) FROM dual;//获取距离当前时间最近的周4，若给定的当前时间恰巧是周4，则表示的是下周的周4.
SELECT LEAST(SYSDATE, '10-10月-08') FROM DUAL;//返回10-10月-08
SELECT GREATEST(SYSDATE, '10-10月-08') FROM DUAL;//返回sysdate当前系统时间
SELECT EXTRACT(YEAR FROM SYSDATE) CURRENT_YEAR FROM DUAL;
SELECT EXTRACT(HOUR FROM TIMESTAMP '2008-10-10 10:10:10') FROM DUAL;
CREATE TABLE  student (id NUMBER(4), name CHAR(20), gender CHAR(1));
INSERT INTO student VALUES(1000, '李莫愁','F');
INSERT INTO student VALUES(1001, '林平之', NULL);
INSERT INTO student(id, name) VALUES(1002, '张无忌');
select * from student where gender is not null;
select * from student where gender is null;
null和任何数字运算结果还是null
SELECT name, NVL(gender,'M') FROM student;
NVL函数的作用：将null替换为给定的值
SELECT ename,sal,NVL(comm,0) FROM emp;//有值就返回comm对应的值，值为null就返回0
SELECT ename,sal+NVL(comm,0) FROM emp;//comm是奖金
SELECT ename,NVL2(comm,sal+comm,sal) FROM emp;
SELECT ename,NVL2(comm,'有奖金','没奖金') FROM emp;






 

